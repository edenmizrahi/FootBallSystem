/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.RefereeNotificationRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RefereeNotification extends TableImpl<RefereeNotificationRecord> {

    private static final long serialVersionUID = -773123959;

    /**
     * The reference instance of <code>footballsystem_db.referee_notification</code>
     */
    public static final RefereeNotification REFEREE_NOTIFICATION = new RefereeNotification();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefereeNotificationRecord> getRecordType() {
        return RefereeNotificationRecord.class;
    }

    /**
     * The column <code>footballsystem_db.referee_notification.match_date</code>.
     */
    public final TableField<RefereeNotificationRecord, LocalDateTime> MATCH_DATE = createField(DSL.name("match_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.referee_notification.home_team</code>.
     */
    public final TableField<RefereeNotificationRecord, String> HOME_TEAM = createField(DSL.name("home_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.referee_notification.away_team</code>.
     */
    public final TableField<RefereeNotificationRecord, String> AWAY_TEAM = createField(DSL.name("away_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.referee_notification.referee</code>.
     */
    public final TableField<RefereeNotificationRecord, String> REFEREE = createField(DSL.name("referee"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.referee_notification.notification_content</code>.
     */
    public final TableField<RefereeNotificationRecord, String> NOTIFICATION_CONTENT = createField(DSL.name("notification_content"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.referee_notification.readed</code>.
     */
    public final TableField<RefereeNotificationRecord, Byte> READED = createField(DSL.name("readed"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>footballsystem_db.referee_notification</code> table reference
     */
    public RefereeNotification() {
        this(DSL.name("referee_notification"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.referee_notification</code> table reference
     */
    public RefereeNotification(String alias) {
        this(DSL.name(alias), REFEREE_NOTIFICATION);
    }

    /**
     * Create an aliased <code>footballsystem_db.referee_notification</code> table reference
     */
    public RefereeNotification(Name alias) {
        this(alias, REFEREE_NOTIFICATION);
    }

    private RefereeNotification(Name alias, Table<RefereeNotificationRecord> aliased) {
        this(alias, aliased, null);
    }

    private RefereeNotification(Name alias, Table<RefereeNotificationRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RefereeNotification(Table<O> child, ForeignKey<O, RefereeNotificationRecord> key) {
        super(child, key, REFEREE_NOTIFICATION);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<RefereeNotificationRecord> getPrimaryKey() {
        return Keys.KEY_REFEREE_NOTIFICATION_PRIMARY;
    }

    @Override
    public List<UniqueKey<RefereeNotificationRecord>> getKeys() {
        return Arrays.<UniqueKey<RefereeNotificationRecord>>asList(Keys.KEY_REFEREE_NOTIFICATION_PRIMARY);
    }

    @Override
    public List<ForeignKey<RefereeNotificationRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefereeNotificationRecord, ?>>asList(Keys.FK_REFEREE_NOTIFICATION_REFEREES_MATCHES);
    }

    public RefereesMatches refereesMatches() {
        return new RefereesMatches(this, Keys.FK_REFEREE_NOTIFICATION_REFEREES_MATCHES);
    }

    @Override
    public RefereeNotification as(String alias) {
        return new RefereeNotification(DSL.name(alias), this);
    }

    @Override
    public RefereeNotification as(Name alias) {
        return new RefereeNotification(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RefereeNotification rename(String name) {
        return new RefereeNotification(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RefereeNotification rename(Name name) {
        return new RefereeNotification(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<LocalDateTime, String, String, String, String, Byte> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
