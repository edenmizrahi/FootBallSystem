/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.EventsOnePlayerRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsOnePlayer extends TableImpl<EventsOnePlayerRecord> {

    private static final long serialVersionUID = 1317839641;

    /**
     * The reference instance of <code>footballsystem_db.events_one_player</code>
     */
    public static final EventsOnePlayer EVENTS_ONE_PLAYER = new EventsOnePlayer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsOnePlayerRecord> getRecordType() {
        return EventsOnePlayerRecord.class;
    }

    /**
     * The column <code>footballsystem_db.events_one_player.event_id</code>.
     */
    public final TableField<EventsOnePlayerRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.events_one_player.player1</code>.
     */
    public final TableField<EventsOnePlayerRecord, String> PLAYER1 = createField(DSL.name("player1"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.events_one_player</code> table reference
     */
    public EventsOnePlayer() {
        this(DSL.name("events_one_player"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.events_one_player</code> table reference
     */
    public EventsOnePlayer(String alias) {
        this(DSL.name(alias), EVENTS_ONE_PLAYER);
    }

    /**
     * Create an aliased <code>footballsystem_db.events_one_player</code> table reference
     */
    public EventsOnePlayer(Name alias) {
        this(alias, EVENTS_ONE_PLAYER);
    }

    private EventsOnePlayer(Name alias, Table<EventsOnePlayerRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventsOnePlayer(Name alias, Table<EventsOnePlayerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventsOnePlayer(Table<O> child, ForeignKey<O, EventsOnePlayerRecord> key) {
        super(child, key, EVENTS_ONE_PLAYER);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<EventsOnePlayerRecord> getPrimaryKey() {
        return Keys.KEY_EVENTS_ONE_PLAYER_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventsOnePlayerRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsOnePlayerRecord>>asList(Keys.KEY_EVENTS_ONE_PLAYER_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventsOnePlayerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventsOnePlayerRecord, ?>>asList(Keys.FK_EVENTS_ONE_PLAYER_EVENTS, Keys.FK_EVENTS_ONE_PLAYER_PLAYERS);
    }

    public Events events() {
        return new Events(this, Keys.FK_EVENTS_ONE_PLAYER_EVENTS);
    }

    public Players players() {
        return new Players(this, Keys.FK_EVENTS_ONE_PLAYER_PLAYERS);
    }

    @Override
    public EventsOnePlayer as(String alias) {
        return new EventsOnePlayer(DSL.name(alias), this);
    }

    @Override
    public EventsOnePlayer as(Name alias) {
        return new EventsOnePlayer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsOnePlayer rename(String name) {
        return new EventsOnePlayer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsOnePlayer rename(Name name) {
        return new EventsOnePlayer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
