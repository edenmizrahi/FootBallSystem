/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.TeamOwnerApprovedTeamsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamOwnerApprovedTeams extends TableImpl<TeamOwnerApprovedTeamsRecord> {

    private static final long serialVersionUID = -245178590;

    /**
     * The reference instance of <code>footballsystem_db.team_owner_approved_teams</code>
     */
    public static final TeamOwnerApprovedTeams TEAM_OWNER_APPROVED_TEAMS = new TeamOwnerApprovedTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamOwnerApprovedTeamsRecord> getRecordType() {
        return TeamOwnerApprovedTeamsRecord.class;
    }

    /**
     * The column <code>footballsystem_db.team_owner_approved_teams.team_owner</code>.
     */
    public final TableField<TeamOwnerApprovedTeamsRecord, String> TEAM_OWNER = createField(DSL.name("team_owner"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.team_owner_approved_teams.team_name</code>.
     */
    public final TableField<TeamOwnerApprovedTeamsRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.team_owner_approved_teams</code> table reference
     */
    public TeamOwnerApprovedTeams() {
        this(DSL.name("team_owner_approved_teams"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.team_owner_approved_teams</code> table reference
     */
    public TeamOwnerApprovedTeams(String alias) {
        this(DSL.name(alias), TEAM_OWNER_APPROVED_TEAMS);
    }

    /**
     * Create an aliased <code>footballsystem_db.team_owner_approved_teams</code> table reference
     */
    public TeamOwnerApprovedTeams(Name alias) {
        this(alias, TEAM_OWNER_APPROVED_TEAMS);
    }

    private TeamOwnerApprovedTeams(Name alias, Table<TeamOwnerApprovedTeamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamOwnerApprovedTeams(Name alias, Table<TeamOwnerApprovedTeamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TeamOwnerApprovedTeams(Table<O> child, ForeignKey<O, TeamOwnerApprovedTeamsRecord> key) {
        super(child, key, TEAM_OWNER_APPROVED_TEAMS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<TeamOwnerApprovedTeamsRecord> getPrimaryKey() {
        return Keys.KEY_TEAM_OWNER_APPROVED_TEAMS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeamOwnerApprovedTeamsRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamOwnerApprovedTeamsRecord>>asList(Keys.KEY_TEAM_OWNER_APPROVED_TEAMS_PRIMARY);
    }

    @Override
    public List<ForeignKey<TeamOwnerApprovedTeamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeamOwnerApprovedTeamsRecord, ?>>asList(Keys.FK_TEAM_OWNER_APPROVED_TEAMS_FANS);
    }

    public Fans fans() {
        return new Fans(this, Keys.FK_TEAM_OWNER_APPROVED_TEAMS_FANS);
    }

    @Override
    public TeamOwnerApprovedTeams as(String alias) {
        return new TeamOwnerApprovedTeams(DSL.name(alias), this);
    }

    @Override
    public TeamOwnerApprovedTeams as(Name alias) {
        return new TeamOwnerApprovedTeams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamOwnerApprovedTeams rename(String name) {
        return new TeamOwnerApprovedTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamOwnerApprovedTeams rename(Name name) {
        return new TeamOwnerApprovedTeams(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
