/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.TeamrolesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teamroles extends TableImpl<TeamrolesRecord> {

    private static final long serialVersionUID = -802692304;

    /**
     * The reference instance of <code>footballsystem_db.teamroles</code>
     */
    public static final Teamroles TEAMROLES = new Teamroles();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamrolesRecord> getRecordType() {
        return TeamrolesRecord.class;
    }

    /**
     * The column <code>footballsystem_db.teamroles.username</code>.
     */
    public final TableField<TeamrolesRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.teamroles.player</code>.
     */
    public final TableField<TeamrolesRecord, Byte> PLAYER = createField(DSL.name("player"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>footballsystem_db.teamroles.coach</code>.
     */
    public final TableField<TeamrolesRecord, Byte> COACH = createField(DSL.name("coach"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>footballsystem_db.teamroles.team Owner</code>.
     */
    public final TableField<TeamrolesRecord, Byte> TEAM_OWNER = createField(DSL.name("team Owner"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>footballsystem_db.teamroles.team Manager</code>.
     */
    public final TableField<TeamrolesRecord, Byte> TEAM_MANAGER = createField(DSL.name("team Manager"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>footballsystem_db.teamroles</code> table reference
     */
    public Teamroles() {
        this(DSL.name("teamroles"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.teamroles</code> table reference
     */
    public Teamroles(String alias) {
        this(DSL.name(alias), TEAMROLES);
    }

    /**
     * Create an aliased <code>footballsystem_db.teamroles</code> table reference
     */
    public Teamroles(Name alias) {
        this(alias, TEAMROLES);
    }

    private Teamroles(Name alias, Table<TeamrolesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teamroles(Name alias, Table<TeamrolesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Teamroles(Table<O> child, ForeignKey<O, TeamrolesRecord> key) {
        super(child, key, TEAMROLES);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<TeamrolesRecord> getPrimaryKey() {
        return Keys.KEY_TEAMROLES_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeamrolesRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamrolesRecord>>asList(Keys.KEY_TEAMROLES_PRIMARY);
    }

    @Override
    public List<ForeignKey<TeamrolesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeamrolesRecord, ?>>asList(Keys.FK_TEAMROLES_FANS);
    }

    public Fans fans() {
        return new Fans(this, Keys.FK_TEAMROLES_FANS);
    }

    @Override
    public Teamroles as(String alias) {
        return new Teamroles(DSL.name(alias), this);
    }

    @Override
    public Teamroles as(Name alias) {
        return new Teamroles(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teamroles rename(String name) {
        return new Teamroles(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teamroles rename(Name name) {
        return new Teamroles(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Byte, Byte, Byte, Byte> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
