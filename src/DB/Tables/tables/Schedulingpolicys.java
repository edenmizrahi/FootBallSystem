/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.SchedulingpolicysRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Schedulingpolicys extends TableImpl<SchedulingpolicysRecord> {

    private static final long serialVersionUID = -1569524256;

    /**
     * The reference instance of <code>footballsystem_db.schedulingpolicys</code>
     */
    public static final Schedulingpolicys SCHEDULINGPOLICYS = new Schedulingpolicys();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchedulingpolicysRecord> getRecordType() {
        return SchedulingpolicysRecord.class;
    }

    /**
     * The column <code>footballsystem_db.schedulingpolicys.name</code>.
     */
    public final TableField<SchedulingpolicysRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.schedulingpolicys</code> table reference
     */
    public Schedulingpolicys() {
        this(DSL.name("schedulingpolicys"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.schedulingpolicys</code> table reference
     */
    public Schedulingpolicys(String alias) {
        this(DSL.name(alias), SCHEDULINGPOLICYS);
    }

    /**
     * Create an aliased <code>footballsystem_db.schedulingpolicys</code> table reference
     */
    public Schedulingpolicys(Name alias) {
        this(alias, SCHEDULINGPOLICYS);
    }

    private Schedulingpolicys(Name alias, Table<SchedulingpolicysRecord> aliased) {
        this(alias, aliased, null);
    }

    private Schedulingpolicys(Name alias, Table<SchedulingpolicysRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Schedulingpolicys(Table<O> child, ForeignKey<O, SchedulingpolicysRecord> key) {
        super(child, key, SCHEDULINGPOLICYS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<SchedulingpolicysRecord> getPrimaryKey() {
        return Keys.KEY_SCHEDULINGPOLICYS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SchedulingpolicysRecord>> getKeys() {
        return Arrays.<UniqueKey<SchedulingpolicysRecord>>asList(Keys.KEY_SCHEDULINGPOLICYS_PRIMARY);
    }

    @Override
    public Schedulingpolicys as(String alias) {
        return new Schedulingpolicys(DSL.name(alias), this);
    }

    @Override
    public Schedulingpolicys as(Name alias) {
        return new Schedulingpolicys(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Schedulingpolicys rename(String name) {
        return new Schedulingpolicys(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Schedulingpolicys rename(Name name) {
        return new Schedulingpolicys(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
