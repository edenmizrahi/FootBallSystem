/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.RfaNotificationsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RfaNotifications extends TableImpl<RfaNotificationsRecord> {

    private static final long serialVersionUID = 1051502823;

    /**
     * The reference instance of <code>footballsystem_db.rfa_notifications</code>
     */
    public static final RfaNotifications RFA_NOTIFICATIONS = new RfaNotifications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RfaNotificationsRecord> getRecordType() {
        return RfaNotificationsRecord.class;
    }

    /**
     * The column <code>footballsystem_db.rfa_notifications.team_name</code>.
     */
    public final TableField<RfaNotificationsRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.rfa_notifications.notification_content</code>.
     */
    public final TableField<RfaNotificationsRecord, String> NOTIFICATION_CONTENT = createField(DSL.name("notification_content"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.rfa_notifications.read</code>.
     */
    public final TableField<RfaNotificationsRecord, Byte> READ = createField(DSL.name("read"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>footballsystem_db.rfa_notifications</code> table reference
     */
    public RfaNotifications() {
        this(DSL.name("rfa_notifications"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.rfa_notifications</code> table reference
     */
    public RfaNotifications(String alias) {
        this(DSL.name(alias), RFA_NOTIFICATIONS);
    }

    /**
     * Create an aliased <code>footballsystem_db.rfa_notifications</code> table reference
     */
    public RfaNotifications(Name alias) {
        this(alias, RFA_NOTIFICATIONS);
    }

    private RfaNotifications(Name alias, Table<RfaNotificationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private RfaNotifications(Name alias, Table<RfaNotificationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> RfaNotifications(Table<O> child, ForeignKey<O, RfaNotificationsRecord> key) {
        super(child, key, RFA_NOTIFICATIONS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<RfaNotificationsRecord> getPrimaryKey() {
        return Keys.KEY_RFA_NOTIFICATIONS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RfaNotificationsRecord>> getKeys() {
        return Arrays.<UniqueKey<RfaNotificationsRecord>>asList(Keys.KEY_RFA_NOTIFICATIONS_PRIMARY);
    }

    @Override
    public RfaNotifications as(String alias) {
        return new RfaNotifications(DSL.name(alias), this);
    }

    @Override
    public RfaNotifications as(Name alias) {
        return new RfaNotifications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RfaNotifications rename(String name) {
        return new RfaNotifications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RfaNotifications rename(Name name) {
        return new RfaNotifications(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Byte> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
