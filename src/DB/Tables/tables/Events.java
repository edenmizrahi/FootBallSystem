/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.EventsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Events extends TableImpl<EventsRecord> {

    private static final long serialVersionUID = -859212250;

    /**
     * The reference instance of <code>footballsystem_db.events</code>
     */
    public static final Events EVENTS = new Events();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsRecord> getRecordType() {
        return EventsRecord.class;
    }

    /**
     * The column <code>footballsystem_db.events.event_id</code>.
     */
    public final TableField<EventsRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.events.date</code>.
     */
    public final TableField<EventsRecord, LocalDateTime> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("'2020-01-01 20:30:00'", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>footballsystem_db.events.referee</code>.
     */
    public final TableField<EventsRecord, String> REFEREE = createField(DSL.name("referee"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.events.match_date</code>.
     */
    public final TableField<EventsRecord, LocalDateTime> MATCH_DATE = createField(DSL.name("match_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.events.home_team_match</code>.
     */
    public final TableField<EventsRecord, String> HOME_TEAM_MATCH = createField(DSL.name("home_team_match"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.events.away_team_match</code>.
     */
    public final TableField<EventsRecord, String> AWAY_TEAM_MATCH = createField(DSL.name("away_team_match"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.events.name</code>.
     */
    public final TableField<EventsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.events.minute_in_match</code>.
     */
    public final TableField<EventsRecord, Integer> MINUTE_IN_MATCH = createField(DSL.name("minute_in_match"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.events</code> table reference
     */
    public Events() {
        this(DSL.name("events"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.events</code> table reference
     */
    public Events(String alias) {
        this(DSL.name(alias), EVENTS);
    }

    /**
     * Create an aliased <code>footballsystem_db.events</code> table reference
     */
    public Events(Name alias) {
        this(alias, EVENTS);
    }

    private Events(Name alias, Table<EventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Events(Name alias, Table<EventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Events(Table<O> child, ForeignKey<O, EventsRecord> key) {
        super(child, key, EVENTS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<EventsRecord> getPrimaryKey() {
        return Keys.KEY_EVENTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventsRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsRecord>>asList(Keys.KEY_EVENTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventsRecord, ?>>asList(Keys.FK_EVENTS2_REFEREES, Keys.FK_EVENTS_MATCHES);
    }

    public Referees referees() {
        return new Referees(this, Keys.FK_EVENTS2_REFEREES);
    }

    public Matches matches() {
        return new Matches(this, Keys.FK_EVENTS_MATCHES);
    }

    @Override
    public Events as(String alias) {
        return new Events(DSL.name(alias), this);
    }

    @Override
    public Events as(Name alias) {
        return new Events(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(String name) {
        return new Events(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Name name) {
        return new Events(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, LocalDateTime, String, LocalDateTime, String, String, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
