/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.CoachsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coachs extends TableImpl<CoachsRecord> {

    private static final long serialVersionUID = 1030666384;

    /**
     * The reference instance of <code>footballsystem_db.coachs</code>
     */
    public static final Coachs COACHS = new Coachs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoachsRecord> getRecordType() {
        return CoachsRecord.class;
    }

    /**
     * The column <code>footballsystem_db.coachs.userName</code>.
     */
    public final TableField<CoachsRecord, String> USERNAME = createField(DSL.name("userName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.coachs.coachTeam</code>.
     */
    public final TableField<CoachsRecord, String> COACHTEAM = createField(DSL.name("coachTeam"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.coachs.roleAtTeam</code>.
     */
    public final TableField<CoachsRecord, String> ROLEATTEAM = createField(DSL.name("roleAtTeam"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>footballsystem_db.coachs</code> table reference
     */
    public Coachs() {
        this(DSL.name("coachs"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.coachs</code> table reference
     */
    public Coachs(String alias) {
        this(DSL.name(alias), COACHS);
    }

    /**
     * Create an aliased <code>footballsystem_db.coachs</code> table reference
     */
    public Coachs(Name alias) {
        this(alias, COACHS);
    }

    private Coachs(Name alias, Table<CoachsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coachs(Name alias, Table<CoachsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Coachs(Table<O> child, ForeignKey<O, CoachsRecord> key) {
        super(child, key, COACHS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<CoachsRecord> getPrimaryKey() {
        return Keys.KEY_COACHS_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoachsRecord>> getKeys() {
        return Arrays.<UniqueKey<CoachsRecord>>asList(Keys.KEY_COACHS_PRIMARY);
    }

    @Override
    public List<ForeignKey<CoachsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoachsRecord, ?>>asList(Keys.FK_COACHS_FANS, Keys.FK_COACHS_TEAMS);
    }

    public Fans fans() {
        return new Fans(this, Keys.FK_COACHS_FANS);
    }

    public Teams teams() {
        return new Teams(this, Keys.FK_COACHS_TEAMS);
    }

    @Override
    public Coachs as(String alias) {
        return new Coachs(DSL.name(alias), this);
    }

    @Override
    public Coachs as(Name alias) {
        return new Coachs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coachs rename(String name) {
        return new Coachs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coachs rename(Name name) {
        return new Coachs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
