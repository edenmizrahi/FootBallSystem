/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.EventsTwoPlayersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsTwoPlayers extends TableImpl<EventsTwoPlayersRecord> {

    private static final long serialVersionUID = -2022209407;

    /**
     * The reference instance of <code>footballsystem_db.events_two_players</code>
     */
    public static final EventsTwoPlayers EVENTS_TWO_PLAYERS = new EventsTwoPlayers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsTwoPlayersRecord> getRecordType() {
        return EventsTwoPlayersRecord.class;
    }

    /**
     * The column <code>footballsystem_db.events_two_players.event_id</code>.
     */
    public final TableField<EventsTwoPlayersRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.events_two_players.player1</code>.
     */
    public final TableField<EventsTwoPlayersRecord, String> PLAYER1 = createField(DSL.name("player1"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.events_two_players.player2</code>.
     */
    public final TableField<EventsTwoPlayersRecord, String> PLAYER2 = createField(DSL.name("player2"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.events_two_players</code> table reference
     */
    public EventsTwoPlayers() {
        this(DSL.name("events_two_players"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.events_two_players</code> table reference
     */
    public EventsTwoPlayers(String alias) {
        this(DSL.name(alias), EVENTS_TWO_PLAYERS);
    }

    /**
     * Create an aliased <code>footballsystem_db.events_two_players</code> table reference
     */
    public EventsTwoPlayers(Name alias) {
        this(alias, EVENTS_TWO_PLAYERS);
    }

    private EventsTwoPlayers(Name alias, Table<EventsTwoPlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventsTwoPlayers(Name alias, Table<EventsTwoPlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventsTwoPlayers(Table<O> child, ForeignKey<O, EventsTwoPlayersRecord> key) {
        super(child, key, EVENTS_TWO_PLAYERS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<EventsTwoPlayersRecord> getPrimaryKey() {
        return Keys.KEY_EVENTS_TWO_PLAYERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventsTwoPlayersRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsTwoPlayersRecord>>asList(Keys.KEY_EVENTS_TWO_PLAYERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventsTwoPlayersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventsTwoPlayersRecord, ?>>asList(Keys.FK_EVENTS_TWO_PLAYERS_EVENTS, Keys.FK_EVENTS_TWO_PLAYERS_PLAYERS, Keys.FK_EVENTS_TWO_PLAYERS_PLAYERS_2);
    }

    public Events events() {
        return new Events(this, Keys.FK_EVENTS_TWO_PLAYERS_EVENTS);
    }

    public Players fkEventsTwoPlayersPlayers() {
        return new Players(this, Keys.FK_EVENTS_TWO_PLAYERS_PLAYERS);
    }

    public Players fkEventsTwoPlayersPlayers_2() {
        return new Players(this, Keys.FK_EVENTS_TWO_PLAYERS_PLAYERS_2);
    }

    @Override
    public EventsTwoPlayers as(String alias) {
        return new EventsTwoPlayers(DSL.name(alias), this);
    }

    @Override
    public EventsTwoPlayers as(Name alias) {
        return new EventsTwoPlayers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsTwoPlayers rename(String name) {
        return new EventsTwoPlayers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsTwoPlayers rename(Name name) {
        return new EventsTwoPlayers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
