/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Indexes;
import DB.Tables.Keys;
import DB.Tables.tables.records.MatchesRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Matches extends TableImpl<MatchesRecord> {

    private static final long serialVersionUID = 973415093;

    /**
     * The reference instance of <code>footballsystem_db.matches</code>
     */
    public static final Matches MATCHES = new Matches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchesRecord> getRecordType() {
        return MatchesRecord.class;
    }

    /**
     * The column <code>footballsystem_db.matches.date</code>.
     */
    public final TableField<MatchesRecord, LocalDateTime> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("'2020-00-00 20:00:00'", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>footballsystem_db.matches.home_team</code>.
     */
    public final TableField<MatchesRecord, String> HOME_TEAM = createField(DSL.name("home_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.matches.away_team</code>.
     */
    public final TableField<MatchesRecord, String> AWAY_TEAM = createField(DSL.name("away_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.matches.home_score</code>.
     */
    public final TableField<MatchesRecord, Integer> HOME_SCORE = createField(DSL.name("home_score"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>footballsystem_db.matches.away_score</code>.
     */
    public final TableField<MatchesRecord, Integer> AWAY_SCORE = createField(DSL.name("away_score"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>footballsystem_db.matches.field</code>.
     */
    public final TableField<MatchesRecord, String> FIELD = createField(DSL.name("field"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.matches.main_referee</code>.
     */
    public final TableField<MatchesRecord, String> MAIN_REFEREE = createField(DSL.name("main_referee"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.matches.Duration_time</code>.
     */
    public final TableField<MatchesRecord, Integer> DURATION_TIME = createField(DSL.name("Duration_time"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("90", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>footballsystem_db.matches</code> table reference
     */
    public Matches() {
        this(DSL.name("matches"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.matches</code> table reference
     */
    public Matches(String alias) {
        this(DSL.name(alias), MATCHES);
    }

    /**
     * Create an aliased <code>footballsystem_db.matches</code> table reference
     */
    public Matches(Name alias) {
        this(alias, MATCHES);
    }

    private Matches(Name alias, Table<MatchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Matches(Name alias, Table<MatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Matches(Table<O> child, ForeignKey<O, MatchesRecord> key) {
        super(child, key, MATCHES);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MATCHES_HOME_TEAM);
    }

    @Override
    public UniqueKey<MatchesRecord> getPrimaryKey() {
        return Keys.KEY_MATCHES_PRIMARY;
    }

    @Override
    public List<UniqueKey<MatchesRecord>> getKeys() {
        return Arrays.<UniqueKey<MatchesRecord>>asList(Keys.KEY_MATCHES_PRIMARY);
    }

    @Override
    public List<ForeignKey<MatchesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MatchesRecord, ?>>asList(Keys.FK_MATCHES_TEAMS, Keys.FK_MATCHES_TEAMS_2, Keys.FK_MATCHES_FIELDS, Keys.FK_MATCHES_REFEREES);
    }

    public Teams fkMatchesTeams() {
        return new Teams(this, Keys.FK_MATCHES_TEAMS);
    }

    public Teams fkMatchesTeams_2() {
        return new Teams(this, Keys.FK_MATCHES_TEAMS_2);
    }

    public FieldsInSystem fieldsInSystem() {
        return new FieldsInSystem(this, Keys.FK_MATCHES_FIELDS);
    }

    public Referees referees() {
        return new Referees(this, Keys.FK_MATCHES_REFEREES);
    }

    @Override
    public Matches as(String alias) {
        return new Matches(DSL.name(alias), this);
    }

    @Override
    public Matches as(Name alias) {
        return new Matches(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(String name) {
        return new Matches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(Name name) {
        return new Matches(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<LocalDateTime, String, String, Integer, Integer, String, String, Integer> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
