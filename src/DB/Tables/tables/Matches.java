/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.tables.records.MatchesRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Matches extends TableImpl<MatchesRecord> {

    private static final long serialVersionUID = -1905736236;

    /**
     * The reference instance of <code>footballsystem_db.matches</code>
     */
    public static final Matches MATCHES = new Matches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchesRecord> getRecordType() {
        return MatchesRecord.class;
    }

    /**
     * The column <code>footballsystem_db.matches.date</code>.
     */
    public final TableField<MatchesRecord, LocalDate> DATE = createField(DSL.name("date"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.matches.home_team</code>.
     */
    public final TableField<MatchesRecord, String> HOME_TEAM = createField(DSL.name("home_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.matches.away_team</code>.
     */
    public final TableField<MatchesRecord, String> AWAY_TEAM = createField(DSL.name("away_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.matches.home_score</code>.
     */
    public final TableField<MatchesRecord, String> HOME_SCORE = createField(DSL.name("home_score"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>footballsystem_db.matches</code> table reference
     */
    public Matches() {
        this(DSL.name("matches"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.matches</code> table reference
     */
    public Matches(String alias) {
        this(DSL.name(alias), MATCHES);
    }

    /**
     * Create an aliased <code>footballsystem_db.matches</code> table reference
     */
    public Matches(Name alias) {
        this(alias, MATCHES);
    }

    private Matches(Name alias, Table<MatchesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Matches(Name alias, Table<MatchesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Matches(Table<O> child, ForeignKey<O, MatchesRecord> key) {
        super(child, key, MATCHES);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public Matches as(String alias) {
        return new Matches(DSL.name(alias), this);
    }

    @Override
    public Matches as(Name alias) {
        return new Matches(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(String name) {
        return new Matches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Matches rename(Name name) {
        return new Matches(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<LocalDate, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
