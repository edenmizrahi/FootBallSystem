/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.EventsTimeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsTime extends TableImpl<EventsTimeRecord> {

    private static final long serialVersionUID = 1677927498;

    /**
     * The reference instance of <code>footballsystem_db.events_time</code>
     */
    public static final EventsTime EVENTS_TIME = new EventsTime();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsTimeRecord> getRecordType() {
        return EventsTimeRecord.class;
    }

    /**
     * The column <code>footballsystem_db.events_time.event_id</code>.
     */
    public final TableField<EventsTimeRecord, Integer> EVENT_ID = createField(DSL.name("event_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.events_time.extra_time</code>.
     */
    public final TableField<EventsTimeRecord, Integer> EXTRA_TIME = createField(DSL.name("extra_time"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>footballsystem_db.events_time</code> table reference
     */
    public EventsTime() {
        this(DSL.name("events_time"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.events_time</code> table reference
     */
    public EventsTime(String alias) {
        this(DSL.name(alias), EVENTS_TIME);
    }

    /**
     * Create an aliased <code>footballsystem_db.events_time</code> table reference
     */
    public EventsTime(Name alias) {
        this(alias, EVENTS_TIME);
    }

    private EventsTime(Name alias, Table<EventsTimeRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventsTime(Name alias, Table<EventsTimeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventsTime(Table<O> child, ForeignKey<O, EventsTimeRecord> key) {
        super(child, key, EVENTS_TIME);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<EventsTimeRecord> getPrimaryKey() {
        return Keys.KEY_EVENTS_TIME_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventsTimeRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsTimeRecord>>asList(Keys.KEY_EVENTS_TIME_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventsTimeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventsTimeRecord, ?>>asList(Keys.FK_EVENTS_TIME_EVENTS);
    }

    public Events events() {
        return new Events(this, Keys.FK_EVENTS_TIME_EVENTS);
    }

    @Override
    public EventsTime as(String alias) {
        return new EventsTime(DSL.name(alias), this);
    }

    @Override
    public EventsTime as(Name alias) {
        return new EventsTime(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsTime rename(String name) {
        return new EventsTime(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsTime rename(Name name) {
        return new EventsTime(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
