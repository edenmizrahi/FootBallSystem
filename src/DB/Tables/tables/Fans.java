/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.FansRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fans extends TableImpl<FansRecord> {

    private static final long serialVersionUID = 700992856;

    /**
     * The reference instance of <code>footballsystem_db.fans</code>
     */
    public static final Fans FANS = new Fans();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FansRecord> getRecordType() {
        return FansRecord.class;
    }

    /**
     * The column <code>footballsystem_db.fans.userName</code>.
     */
    public final TableField<FansRecord, String> USERNAME = createField(DSL.name("userName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.fans.fullName</code>.
     */
    public final TableField<FansRecord, String> FULLNAME = createField(DSL.name("fullName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.fans.password_hash</code>.
     */
    public final TableField<FansRecord, String> PASSWORD_HASH = createField(DSL.name("password_hash"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false).defaultValue(org.jooq.impl.DSL.field("'bcb15f821479b4d5772bd0ca866c00ad5f926e3580720659cc80d39c9d09802a'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.fans.phoneNumber</code>.
     */
    public final TableField<FansRecord, String> PHONENUMBER = createField(DSL.name("phoneNumber"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.fans.email</code>.
     */
    public final TableField<FansRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("'soccersystemuser@gmail.com'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.fans.birthday</code>.
     */
    public final TableField<FansRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), org.jooq.impl.SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.fans.to_email</code>.
     */
    public final TableField<FansRecord, Byte> TO_EMAIL = createField(DSL.name("to_email"), org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * Create a <code>footballsystem_db.fans</code> table reference
     */
    public Fans() {
        this(DSL.name("fans"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.fans</code> table reference
     */
    public Fans(String alias) {
        this(DSL.name(alias), FANS);
    }

    /**
     * Create an aliased <code>footballsystem_db.fans</code> table reference
     */
    public Fans(Name alias) {
        this(alias, FANS);
    }

    private Fans(Name alias, Table<FansRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fans(Name alias, Table<FansRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Fans(Table<O> child, ForeignKey<O, FansRecord> key) {
        super(child, key, FANS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<FansRecord> getPrimaryKey() {
        return Keys.KEY_FANS_PRIMARY;
    }

    @Override
    public List<UniqueKey<FansRecord>> getKeys() {
        return Arrays.<UniqueKey<FansRecord>>asList(Keys.KEY_FANS_PRIMARY);
    }

    @Override
    public Fans as(String alias) {
        return new Fans(DSL.name(alias), this);
    }

    @Override
    public Fans as(Name alias) {
        return new Fans(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fans rename(String name) {
        return new Fans(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Fans rename(Name name) {
        return new Fans(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, String, LocalDate, Byte> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
