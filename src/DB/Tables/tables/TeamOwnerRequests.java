/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.TeamOwnerRequestsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamOwnerRequests extends TableImpl<TeamOwnerRequestsRecord> {

    private static final long serialVersionUID = -797187385;

    /**
     * The reference instance of <code>footballsystem_db.team_owner_requests</code>
     */
    public static final TeamOwnerRequests TEAM_OWNER_REQUESTS = new TeamOwnerRequests();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamOwnerRequestsRecord> getRecordType() {
        return TeamOwnerRequestsRecord.class;
    }

    /**
     * The column <code>footballsystem_db.team_owner_requests.team_owner</code>.
     */
    public final TableField<TeamOwnerRequestsRecord, String> TEAM_OWNER = createField(DSL.name("team_owner"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.team_owner_requests.team_name</code>.
     */
    public final TableField<TeamOwnerRequestsRecord, String> TEAM_NAME = createField(DSL.name("team_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.team_owner_requests</code> table reference
     */
    public TeamOwnerRequests() {
        this(DSL.name("team_owner_requests"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.team_owner_requests</code> table reference
     */
    public TeamOwnerRequests(String alias) {
        this(DSL.name(alias), TEAM_OWNER_REQUESTS);
    }

    /**
     * Create an aliased <code>footballsystem_db.team_owner_requests</code> table reference
     */
    public TeamOwnerRequests(Name alias) {
        this(alias, TEAM_OWNER_REQUESTS);
    }

    private TeamOwnerRequests(Name alias, Table<TeamOwnerRequestsRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamOwnerRequests(Name alias, Table<TeamOwnerRequestsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TeamOwnerRequests(Table<O> child, ForeignKey<O, TeamOwnerRequestsRecord> key) {
        super(child, key, TEAM_OWNER_REQUESTS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<TeamOwnerRequestsRecord> getPrimaryKey() {
        return Keys.KEY_TEAM_OWNER_REQUESTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeamOwnerRequestsRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamOwnerRequestsRecord>>asList(Keys.KEY_TEAM_OWNER_REQUESTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<TeamOwnerRequestsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeamOwnerRequestsRecord, ?>>asList(Keys.FK_TEAMOWNER_REQUESTS_FANS);
    }

    public Fans fans() {
        return new Fans(this, Keys.FK_TEAMOWNER_REQUESTS_FANS);
    }

    @Override
    public TeamOwnerRequests as(String alias) {
        return new TeamOwnerRequests(DSL.name(alias), this);
    }

    @Override
    public TeamOwnerRequests as(Name alias) {
        return new TeamOwnerRequests(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamOwnerRequests rename(String name) {
        return new TeamOwnerRequests(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamOwnerRequests rename(Name name) {
        return new TeamOwnerRequests(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
