/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.FanMatchesFollowRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FanMatchesFollow extends TableImpl<FanMatchesFollowRecord> {

    private static final long serialVersionUID = 551478514;

    /**
     * The reference instance of <code>footballsystem_db.fan_matches_follow</code>
     */
    public static final FanMatchesFollow FAN_MATCHES_FOLLOW = new FanMatchesFollow();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FanMatchesFollowRecord> getRecordType() {
        return FanMatchesFollowRecord.class;
    }

    /**
     * The column <code>footballsystem_db.fan_matches_follow.user_name</code>.
     */
    public final TableField<FanMatchesFollowRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.fan_matches_follow.match_date</code>.
     */
    public final TableField<FanMatchesFollowRecord, LocalDateTime> MATCH_DATE = createField(DSL.name("match_date"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * The column <code>footballsystem_db.fan_matches_follow.home_team</code>.
     */
    public final TableField<FanMatchesFollowRecord, String> HOME_TEAM = createField(DSL.name("home_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>footballsystem_db.fan_matches_follow.away_team</code>.
     */
    public final TableField<FanMatchesFollowRecord, String> AWAY_TEAM = createField(DSL.name("away_team"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>footballsystem_db.fan_matches_follow</code> table reference
     */
    public FanMatchesFollow() {
        this(DSL.name("fan_matches_follow"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.fan_matches_follow</code> table reference
     */
    public FanMatchesFollow(String alias) {
        this(DSL.name(alias), FAN_MATCHES_FOLLOW);
    }

    /**
     * Create an aliased <code>footballsystem_db.fan_matches_follow</code> table reference
     */
    public FanMatchesFollow(Name alias) {
        this(alias, FAN_MATCHES_FOLLOW);
    }

    private FanMatchesFollow(Name alias, Table<FanMatchesFollowRecord> aliased) {
        this(alias, aliased, null);
    }

    private FanMatchesFollow(Name alias, Table<FanMatchesFollowRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FanMatchesFollow(Table<O> child, ForeignKey<O, FanMatchesFollowRecord> key) {
        super(child, key, FAN_MATCHES_FOLLOW);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<FanMatchesFollowRecord> getPrimaryKey() {
        return Keys.KEY_FAN_MATCHES_FOLLOW_PRIMARY;
    }

    @Override
    public List<UniqueKey<FanMatchesFollowRecord>> getKeys() {
        return Arrays.<UniqueKey<FanMatchesFollowRecord>>asList(Keys.KEY_FAN_MATCHES_FOLLOW_PRIMARY);
    }

    @Override
    public List<ForeignKey<FanMatchesFollowRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<FanMatchesFollowRecord, ?>>asList(Keys.FK_FAN_MATCHES_FOLLOW_FANS, Keys.FK_FAN_MATCHES_FOLLOW_MATCHES);
    }

    public Fans fans() {
        return new Fans(this, Keys.FK_FAN_MATCHES_FOLLOW_FANS);
    }

    public Matches matches() {
        return new Matches(this, Keys.FK_FAN_MATCHES_FOLLOW_MATCHES);
    }

    @Override
    public FanMatchesFollow as(String alias) {
        return new FanMatchesFollow(DSL.name(alias), this);
    }

    @Override
    public FanMatchesFollow as(Name alias) {
        return new FanMatchesFollow(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FanMatchesFollow rename(String name) {
        return new FanMatchesFollow(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FanMatchesFollow rename(Name name) {
        return new FanMatchesFollow(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, LocalDateTime, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
