/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.RfasRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rfas extends TableImpl<RfasRecord> {

    private static final long serialVersionUID = 1222654955;

    /**
     * The reference instance of <code>footballsystem_db.rfas</code>
     */
    public static final Rfas RFAS = new Rfas();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RfasRecord> getRecordType() {
        return RfasRecord.class;
    }

    /**
     * The column <code>footballsystem_db.rfas.userName</code>.
     */
    public final TableField<RfasRecord, String> USERNAME = createField(DSL.name("userName"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.rfas</code> table reference
     */
    public Rfas() {
        this(DSL.name("rfas"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.rfas</code> table reference
     */
    public Rfas(String alias) {
        this(DSL.name(alias), RFAS);
    }

    /**
     * Create an aliased <code>footballsystem_db.rfas</code> table reference
     */
    public Rfas(Name alias) {
        this(alias, RFAS);
    }

    private Rfas(Name alias, Table<RfasRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rfas(Name alias, Table<RfasRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Rfas(Table<O> child, ForeignKey<O, RfasRecord> key) {
        super(child, key, RFAS);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<RfasRecord> getPrimaryKey() {
        return Keys.KEY_RFAS_PRIMARY;
    }

    @Override
    public List<UniqueKey<RfasRecord>> getKeys() {
        return Arrays.<UniqueKey<RfasRecord>>asList(Keys.KEY_RFAS_PRIMARY);
    }

    @Override
    public List<ForeignKey<RfasRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RfasRecord, ?>>asList(Keys.FK_RFAS_FANS);
    }

    public Fans fans() {
        return new Fans(this, Keys.FK_RFAS_FANS);
    }

    @Override
    public Rfas as(String alias) {
        return new Rfas(DSL.name(alias), this);
    }

    @Override
    public Rfas as(Name alias) {
        return new Rfas(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rfas rename(String name) {
        return new Rfas(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rfas rename(Name name) {
        return new Rfas(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
