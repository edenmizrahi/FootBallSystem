/*
 * This file is generated by jOOQ.
 */
package DB.Tables.tables;


import DB.Tables.FootballsystemDb;
import DB.Tables.Keys;
import DB.Tables.tables.records.FieldsInSystemRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FieldsInSystem extends TableImpl<FieldsInSystemRecord> {

    private static final long serialVersionUID = -2011443954;

    /**
     * The reference instance of <code>footballsystem_db.fields_in_system</code>
     */
    public static final FieldsInSystem FIELDS_IN_SYSTEM = new FieldsInSystem();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FieldsInSystemRecord> getRecordType() {
        return FieldsInSystemRecord.class;
    }

    /**
     * The column <code>footballsystem_db.fields_in_system.name</code>.
     */
    public final TableField<FieldsInSystemRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>footballsystem_db.fields_in_system</code> table reference
     */
    public FieldsInSystem() {
        this(DSL.name("fields_in_system"), null);
    }

    /**
     * Create an aliased <code>footballsystem_db.fields_in_system</code> table reference
     */
    public FieldsInSystem(String alias) {
        this(DSL.name(alias), FIELDS_IN_SYSTEM);
    }

    /**
     * Create an aliased <code>footballsystem_db.fields_in_system</code> table reference
     */
    public FieldsInSystem(Name alias) {
        this(alias, FIELDS_IN_SYSTEM);
    }

    private FieldsInSystem(Name alias, Table<FieldsInSystemRecord> aliased) {
        this(alias, aliased, null);
    }

    private FieldsInSystem(Name alias, Table<FieldsInSystemRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> FieldsInSystem(Table<O> child, ForeignKey<O, FieldsInSystemRecord> key) {
        super(child, key, FIELDS_IN_SYSTEM);
    }

    @Override
    public Schema getSchema() {
        return FootballsystemDb.FOOTBALLSYSTEM_DB;
    }

    @Override
    public UniqueKey<FieldsInSystemRecord> getPrimaryKey() {
        return Keys.KEY_FIELDS_IN_SYSTEM_PRIMARY;
    }

    @Override
    public List<UniqueKey<FieldsInSystemRecord>> getKeys() {
        return Arrays.<UniqueKey<FieldsInSystemRecord>>asList(Keys.KEY_FIELDS_IN_SYSTEM_PRIMARY);
    }

    @Override
    public FieldsInSystem as(String alias) {
        return new FieldsInSystem(DSL.name(alias), this);
    }

    @Override
    public FieldsInSystem as(Name alias) {
        return new FieldsInSystem(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldsInSystem rename(String name) {
        return new FieldsInSystem(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FieldsInSystem rename(Name name) {
        return new FieldsInSystem(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
